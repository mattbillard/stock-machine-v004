LEARNED / SELF-REMINDERS


ANGULAR
- Enable Express to distinguish between normal and XHR reqs by putting the following in app.config $httpProvider.defaults.headers.common['X-Requested-With'] = 'XMLHttpRequest';

GULP
- Require()s at the top slow down the initialization of gulp considerably. Move them into the tasks that you need them.

LESS
- There are 3 options for LESS->CSS:
    1) Express's less-middleware (which will compile files when the browser requests them)
    2) IntelliJ's less file watcher
    3) gulp watch (I have a task to watch this. Needs to be run manually.)
    - #1 seems to compile more often than needed
    - #2 is dependent on a specific IDE
    - #3 is the only one that does the additional autoprefix task specified in gulpfile
    - So I'm going to stick with #3. (Besides I'm watching for TS->JS anyway)

NODE/EXPRESS
- Errors
    - Node/Express have gotten a lot better at handling errors without crashing the whole server. Just make sure your error handler logs it.
    - HTTP vs XHR:
        - HTTP: use res.render('error') to serve a error webpage
        - XHR: use res.send('ERROR: '+err) so XHR errors return just a message and not a whole webpage with tons of HTML

MONGODB / MONGOOSE
- Count: to get the count, you need to do queries
- Mongoose doesn't care what order you do .sort().limit().skip()

TYPESCRIPT
- IntelliJ uses an outdated version of TypeScript. Update TypeScript with "npm update typescript -g". Then in the settings, point the "Compiler Version" to /usr/local/lib/node_modules/typescript/lib
- There are 3 options for TS->JS:
    1) npm run tsc (Specified in package.json. Needs to be run manually.)
    2) IntelliJ's TypeScript file watcher
    3) gulp watch (I have a task to watch this. Needs to be run manually.)
    - #1 is super fast to bootup
    - #2 is dependent on a specific IDE
    - #3 is the only one that does the additional ngAnnotate task specified in gulpfile
    - So I'm going to stick with #3. (Besides I'm watching for LESS->CSS anyway)
